type Nat = nat;
type Principal = principal;
type TransferError = variant {
  Unauthorized: record { token_ids: vec Nat };
  TokenAlreadyExists: record { token_id: Nat };
  TokenNotFound: record { token_id: Nat };
  InsufficientBalance: record { token_id: Nat };
  InvalidMetadata: record { token_id: Nat };
};

type Message = record {
  id: text;
  nonce: nat64;
  op_type: nat8;
  src_chain_id: nat64;
  dest_chain_id: nat64;
  dest_address: text;
  contract_address: text;
  token_id: nat64;
  token_metadata: text;
};

service : {
  mint: (Message) -> (variant { Ok: Nat; Err: text });
  burn: (Message, Nat, Principal, nat64, text) -> (variant { Ok: Nat; Err: text });
}
