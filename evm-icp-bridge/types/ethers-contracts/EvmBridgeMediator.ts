/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace BridgeMediator {
  export type MessageStruct = {
    nonce: BigNumberish;
    opType: BigNumberish;
    srcChainId: BigNumberish;
    destChainId: BigNumberish;
    destAddress: string;
    contractAddress: AddressLike;
    tokenId: BigNumberish;
  };

  export type MessageStructOutput = [
    nonce: bigint,
    opType: bigint,
    srcChainId: bigint,
    destChainId: bigint,
    destAddress: string,
    contractAddress: string,
    tokenId: bigint
  ] & {
    nonce: bigint;
    opType: bigint;
    srcChainId: bigint;
    destChainId: bigint;
    destAddress: string;
    contractAddress: string;
    tokenId: bigint;
  };
}

export interface EvmBridgeMediatorInterface extends Interface {
  getFunction(nameOrSignature: "getNonce" | "sendMessage"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "MessageSend"): EventFragment;

  encodeFunctionData(functionFragment: "getNonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
}

export namespace MessageSendEvent {
  export type InputTuple = [
    id: BytesLike,
    message: BridgeMediator.MessageStruct
  ];
  export type OutputTuple = [
    id: string,
    message: BridgeMediator.MessageStructOutput
  ];
  export interface OutputObject {
    id: string;
    message: BridgeMediator.MessageStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EvmBridgeMediator extends BaseContract {
  connect(runner?: ContractRunner | null): EvmBridgeMediator;
  waitForDeployment(): Promise<this>;

  interface: EvmBridgeMediatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getNonce: TypedContractMethod<[], [bigint], "view">;

  sendMessage: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sendMessage"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "MessageSend"
  ): TypedContractEvent<
    MessageSendEvent.InputTuple,
    MessageSendEvent.OutputTuple,
    MessageSendEvent.OutputObject
  >;

  filters: {
    "MessageSend(bytes32,tuple)": TypedContractEvent<
      MessageSendEvent.InputTuple,
      MessageSendEvent.OutputTuple,
      MessageSendEvent.OutputObject
    >;
    MessageSend: TypedContractEvent<
      MessageSendEvent.InputTuple,
      MessageSendEvent.OutputTuple,
      MessageSendEvent.OutputObject
    >;
  };
}
