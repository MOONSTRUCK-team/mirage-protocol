/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "./common";

export declare namespace Bridge {
  export type MessageStruct = {
    nonce: BigNumberish;
    srcChainId: BigNumberish;
    destChainId: BigNumberish;
    contract: AddressLike;
    tokenId: BigNumberish;
  };

  export type MessageStructOutput = [
    nonce: bigint,
    srcChainId: bigint,
    destChainId: bigint,
    contract: string,
    tokenId: bigint
  ] & {
    nonce: bigint;
    srcChainId: bigint;
    destChainId: bigint;
    contract: string;
    tokenId: bigint;
  };
}

export interface EvmBridgeContractInterface extends Interface {
  getEvent(nameOrSignatureOrTopic: "messageSend"): EventFragment;
}

export namespace messageSendEvent {
  export type InputTuple = [
    id: BigNumberish,
    messageData: Bridge.MessageStruct
  ];
  export type OutputTuple = [
    id: bigint,
    messageData: Bridge.MessageStructOutput
  ];
  export interface OutputObject {
    id: bigint;
    messageData: Bridge.MessageStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EvmBridgeContract extends BaseContract {
  connect(runner?: ContractRunner | null): EvmBridgeContract;
  waitForDeployment(): Promise<this>;

  interface: EvmBridgeContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "messageSend"
  ): TypedContractEvent<
    messageSendEvent.InputTuple,
    messageSendEvent.OutputTuple,
    messageSendEvent.OutputObject
  >;

  filters: {
    "messageSend(uint256,tuple)": TypedContractEvent<
      messageSendEvent.InputTuple,
      messageSendEvent.OutputTuple,
      messageSendEvent.OutputObject
    >;
    messageSend: TypedContractEvent<
      messageSendEvent.InputTuple,
      messageSendEvent.OutputTuple,
      messageSendEvent.OutputObject
    >;
  };
}
